buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.apache.commons:commons-io:1.3.2'
    }
}


allprojects {
    apply plugin: 'idea'
    apply plugin: 'eclipse'
    apply plugin: 'java'
    apply plugin: 'jacoco'

    repositories {
        mavenCentral()
    }

    dependencies {
        compile fileTree(dir: new File(rootDir, 'libs'), include: '*.jar')
        compile fileTree(dir: new File(rootDir, 'libs/betas'), include: '*.jar')
        compile 'org.jacoco:org.jacoco.agent:0.6.2.201302030002'
    }

    jacocoTestReport {
        reports {
            xml.enabled = false
            csv.enabled = false
            html.enabled = true
        }
    }
}

subprojects {

    dependencies {
        testCompile group: 'junit', name: 'junit', version: '4.+'
    }

    sourceCompatibility = 1.7
    targetCompatibility = 1.7
}


dependencies {
    compile project(':common')
    compile project(':crypto')
    compile project(':mixnet')
    compile project(':node')
}

task remove_betas << {
    File root = new File(projectDir, betaJarPath);
    if (root.exists()) {
        org.apache.commons.io.FileUtils.deleteDirectory(root);
        System.out.println(" Removed betas, use 'gradle fetch_betas' to reload.");
    }
}

task fetch_betas << {
    File root = new File(projectDir, betaJarPath);
    if (!root.exists()) {
        root.mkdirs();
    }
    fetchFile(betaRemoteUrl, root);
}

task test_foo << {
    System.out.println(project(':common').file("build/lib/common.jar"));
}


task make_node_jar(dependsOn: 'compileJava') << {

    println("\r\nMaking Node Executable Jar\r\n");

    File root = new File(projectDir, "/installer/build/jars");

    //
    // Final jar will go in here.
    //
    if (root.exists()) {
        org.apache.commons.io.FileUtils.deleteDirectory(root);
    }
    root.mkdirs();

    //
    // Stage for installed node layout.
    //
    File stageDir = new File(root, "/node_stage");
    stageDir.mkdirs();

    //
    // This makes a node stand alone uses the ant jar task..
    //

    File jarFile = new File(root, "XimixNode.jar");

    ant.jar(destfile: jarFile,  manifest: new File(projectDir,"installer/manifest/MANIFEST.MF")) {
        fileset(dir: new File(projectDir, 'common/build/classes/main/'));
        fileset(dir: new File(projectDir, 'crypto/build/classes/main/'));
        fileset(dir: new File(projectDir, 'mixnet/build/classes/main/'));
        fileset(dir: new File(projectDir, 'node/build/classes/main/'));

        zipfileset(includes: '**/*.class', src: new File(projectDir,betaJarPath+betaJarName));
    }

    println("");
    println("Created: "+jarFile);
    println();
    println("To run a demo node:\r\n");
    println("java -jar "+jarFile+" demo/conf/mixnet.xml demo/conf/node1.xml");
    println();

}

/**
 * Fetch a file at url and save it into the directory.
 * The filename used is taken from the url.
 */
void fetchFile(String url, File directory) {
    URL u = new URL(url);
    String f = u.getFile();
    f = f.substring(f.lastIndexOf("/") + 1);
    System.out.print("Fetching '" + f + "' from '" + url + "' ... ");
    org.apache.commons.io.FileUtils.copyURLToFile(u, new File(directory, f));
    System.out.println("Complete");
}
