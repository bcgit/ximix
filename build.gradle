buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.apache.commons:commons-io:1.3.2'
    }
}

configurations {
    jacocoant
    jacoco
    antjunit
}

dependencies {
    jacoco 'org.jacoco:org.jacoco.agent:0.6.2.201302030002'
    jacocoant 'org.jacoco:org.jacoco.ant:0.6.2.201302030002'
    antjunit 'org.apache.ant:ant-junit:1.8.4'
}


allprojects {
    apply plugin: 'idea'
    apply plugin: 'eclipse'
    apply plugin: 'java'

    configurations {
        codeCoverage
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        compile fileTree(dir: new File(rootDir, 'libs'), include: '*.jar')
        compile 'org.jacoco:org.jacoco.agent:0.6.2.201302030002'
        codeCoverage group: 'org.jacoco', name: 'org.jacoco.agent', version: '0.6.2.201302030002', classifier: 'runtime'
    }

    test {
        jvmArgs "-javaagent:${configurations.codeCoverage.singleFile}=destfile=${rootDir}/coverage/jacoco.exec,sessionid=HSServ,append=true",
                '-Djacoco=true',
                '-Xms128m',
                '-Xmx512m',
                '-XX:MaxPermSize=128m'
    }
}

subprojects {

    dependencies {
        testCompile group: 'junit', name: 'junit', version: '4.+'
    }

    sourceCompatibility = 1.7
    targetCompatibility = 1.7
}


dependencies {
    compile project(':common')
    compile project(':crypto')
    compile project(':mixnet')
    compile project(':node')
}

task remove_libs << {
    File root = new File(projectDir, libsJarPath);
    if (root.exists()) {
        org.apache.commons.io.FileUtils.deleteDirectory(root);
        System.out.println(" Removed libs, use 'gradle fetch_libs' to reload.");
    }
}

task fetch_libs << {
    File root = new File(projectDir, libsJarPath);
    if (!root.exists()) {
        root.mkdirs();
    }
    fetchFile(providerRemoteUrl, root);
    fetchFile(pkixRemoteUrl, root);
}

task test_foo << {
    System.out.println(project(':common').file("build/lib/common.jar"));
}

task coverage_report(dependsOn: 'compileTestJava') << {

    //
    // Get jacoco jar.
    //
    File jacocoJar = null;
    project(':common').configurations.compile.each { file ->
        if (file.name.indexOf('jacoco') > 0) {
            jacocoJar = file;
        }
    }

    File root = new File(projectDir, "coverage");

    root.mkdirs();

    File coverageReport = new File(root, "reports");

    //
    // Delete old reports.
    //
    if (coverageReport.exists()) {
        org.apache.commons.io.FileUtils.deleteDirectory(coverageReport);
    }

    coverageReport.mkdirs();

    ant.taskdef(name: "jacocoreport", classname: "org.jacoco.ant.ReportTask", classpath: configurations.jacocoant.asPath);

    ant {
        jacocoreport {
            executiondata {
                fileset(dir: "${rootDir}/coverage/") {
                    file(file: 'jacoco.exec')
                }
            }

            structure(name: rootProject.name) {

                classfiles {
                    fileset dir: "${rootDir}/common/build/classes/main"
                    fileset dir: "${rootDir}/crypto/build/classes/main"
                    fileset dir: "${rootDir}/mixnet/build/classes/main"
                    fileset dir: "${rootDir}/node/build/classes/main"
                }

                // this is for Windows
                sourcefiles(encoding: 'UTF8') {
                    fileset dir: "${rootDir}/common/src/main/java"
                    fileset dir: "${rootDir}/crypto/src/main/java"
                    fileset dir: "${rootDir}/mixnet/src/main/java"
                    fileset dir: "${rootDir}/node/src/main/java"
                }
            }

            xml destfile: "${coverageReport}/ximix.xml"
            html destdir: "${coverageReport}"
        }
    }

    //
    // Delete source file..
    //
    // new File("{$rootDir}/coverage/jacoco.exe").delete();


}


task make_node_jar(dependsOn: 'compileJava') << {

    println("\r\nMaking Node Executable Jar\r\n");

    File root = new File(projectDir, "/installer/build/jars");

    //
    // Final jar will go in here.
    //
    if (root.exists()) {
        org.apache.commons.io.FileUtils.deleteDirectory(root);
    }
    root.mkdirs();

    //
    // Stage for installed node layout.
    //
    File stageDir = new File(root, "/node_stage");
    stageDir.mkdirs();

    //
    // This makes a node stand alone uses the ant jar task..
    //

    File jarFile = new File(root, "XimixNode.jar");

    ant.jar(destfile: jarFile, manifest: new File(projectDir, "installer/manifest/MANIFEST.MF")) {
        fileset(dir: new File(projectDir, 'common/build/classes/main/'));
        fileset(dir: new File(projectDir, 'crypto/build/classes/main/'));
        fileset(dir: new File(projectDir, 'mixnet/build/classes/main/'));
        fileset(dir: new File(projectDir, 'node/build/classes/main/'));

        zipfileset(includes: '**/*.class', src: new File(projectDir, libsJarPath));
    }

    println("");
    println("Created: " + jarFile);
    println();
    println("To run a demo node:\r\n");
    println("java -jar " + jarFile + " demo/conf/mixnet.xml demo/conf/node1.xml");
    println();

}

/**
 * Fetch a file at url and save it into the directory.
 * The filename used is taken from the url.
 */
void fetchFile(String url, File directory) {
    URL u = new URL(url);
    String f = u.getFile();
    f = f.substring(f.lastIndexOf("/") + 1);
    System.out.print("Fetching '" + f + "' from '" + url + "' ... ");
    org.apache.commons.io.FileUtils.copyURLToFile(u, new File(directory, f));
    System.out.println("Complete");
}
